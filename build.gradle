apply plugin: 'java'
apply plugin: 'idea'

idea {
    module {
        inheritOutputDirs = false
        outputDir = compileJava.destinationDir
        testOutputDir = compileTestJava.destinationDir
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'scala'

    compileJava {
        sourceCompatibility = 1.6
        targetCompatibility = 1.6
    }

    repositories {
        jcenter()
    }

    dependencies {
        compile 'org.slf4j:slf4j-api:1.7.7',
                'io.netty:netty-all:4.0.28.Final',
                'com.google.guava:guava:18.0',
                'org.scala-lang:scala-library:2.11.6'

        testCompile 'org.scalatest:scalatest_2.11:2.2.5'

        testRuntime 'org.pegdown:pegdown:1.1.0'
    }

    // integration test configuration
    sourceSets {
        integrationTest {
            scala {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir file('src/integration/scala')
            }
            resources.srcDir file('src/integration/resources')
        }
    }

    configurations {
        integrationTestCompile.extendsFrom testCompile
        integrationTestRuntime.extendsFrom testRuntime
    }

    task integrationTest(type: Test) {
        testClassesDir = sourceSets.integrationTest.output.classesDir
        classpath = sourceSets.integrationTest.runtimeClasspath
        outputs.upToDateWhen { false }
    }

    check.dependsOn integrationTest
    integrationTest.mustRunAfter test
}
